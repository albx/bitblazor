@inherits TestContext

@code {
    [Fact]
    public void BitTextField_Should_Render_Default_Markup_Correctly()
    {
        string value = "value";
        var component = Render(@<BitTextField Label="label" Id="test-textfield" @bind-Value="@value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="active">label</label>
                <input type="text" class="form-control" id="test-textfield" name="test-textfield" value="value" />
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Render_Placeholder_Correctly()
    {
        string? value = null;
        var component = Render(
            @<BitTextField Label="label" 
                           Id="test-textfield" 
                           Placeholder="type here"
                           @bind-Value="@value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="active">label</label>
                <input type="text" class="form-control" id="test-textfield" name="test-textfield" placeholder="type here" />
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Set_Disabled_Correctly()
    {
        string? value = null;

        var component = Render(
            @<BitTextField Label="label" 
                           Id="test-textfield" 
                           Disabled="true"
                           @bind-Value="@value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="">label</label>
                <input type="text" class="form-control" id="test-textfield" name="test-textfield" disabled />
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Set_Readonly_Corrrectly()
    {
        string? value = "readonly";

        var component = Render(
            @<BitTextField Label="label"
                           Id="test-textfield"
                           @bind-Value="value"
                           Readonly="true"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="active">label</label>
                <input type="text" class="form-control" id="test-textfield" value="readonly" name="test-textfield" readonly />
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Render_Plaintext_Field_Correctly()
    {
        string? value = "readonly";

        var component = Render(
            @<BitTextField Label="label"
                           Id="test-textfield"
                           @bind-Value="value"
                           Plaintext="true"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="active">label</label>
                <input type="text" class="form-control-plaintext" id="test-textfield" value="readonly" name="test-textfield" readonly />
             </div>);
    }

    [Theory]
    [InlineData(TextFieldType.Text, "text")]
    [InlineData(TextFieldType.Email, "email")]
    [InlineData(TextFieldType.Tel, "tel")]
    [InlineData(TextFieldType.Url, "url")]
    public void BitTextField_Should_Render_Specified_Type_Correctly(TextFieldType type, string expectedTypeString)
    {
        string? value = null;
        var component = Render(
            @<BitTextField Label="label"
                           Id="test-textfield"
                           @bind-Value="value"
                           Type="type"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="">label</label>
                <input type="@expectedTypeString" class="form-control" id="test-textfield" name="test-textfield" />
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Render_Additional_Text_Correctly()
    {
        string? value = null;

        var component = Render(
            @<BitTextField Label="label"
                           Id="test-textfield"
                           @bind-Value="value"
                           AdditionalTextId="helper-text">
                <AdditionalText>Some text</AdditionalText>
             </BitTextField>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-textfield" class="">label</label>
                <input type="text" class="form-control" id="test-textfield" name="test-textfield" aria-describedby="helper-text" />
                <small id="helper-text" class="form-text">Some text</small>
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Render_Correctly_Prepend_Content()
    {
        string? value = null;

        var component = Render(
            @<BitTextField Label="label"
                           Id="test-textfield"
                           @bind-Value="value">
                <PrependContent>
                    <span class="input-group-text">
                        <BitIcon IconName="@Icons.ItPencil"
                                 Size="@IconSize.Small"
                                 aria-hidden="true"/>
                    </span>
                </PrependContent>
             </BitTextField>);

        component.MarkupMatches(
            @<div class="form-group">
                <div class="input-group">
                    <span class="input-group-text"><svg class="icon icon-sm" aria-hidden="true"><use href="/_content/BitBlazor/bootstrap-italia/svg/sprites.svg#it-pencil"></use></svg></span>
                    <label for="test-textfield" class="">label</label>
                    <input type="text" class="form-control" id="test-textfield" name="test-textfield" />
                </div>
             </div>);
    }

    [Fact]
    public void BitTextField_Should_Render_Correctly_Append_Content()
    {
        string? value = null;

        var component = Render(
            @<BitTextField Label="label"
                           Id="test-textfield"
                           @bind-Value="value">
                <AppendContent>
                    <div class="input-group-append">
                        <BitButton Color="Color.Primary">
                            Send
                        </BitButton>
                    </div>
                </AppendContent>
             </BitTextField>);

        component.MarkupMatches(
            @<div class="form-group">
                <div class="input-group">
                    <label for="test-textfield" class="">label</label>
                    <input type="text" class="form-control" id="test-textfield" name="test-textfield" />
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="button">Send</button>
                    </div>
                </div>
             </div>);
    }
}
