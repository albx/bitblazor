@inherits TestContext

@code
{
    #region Colors tests
    [Theory]
    [InlineData(Color.Primary, "btn-primary")]
    [InlineData(Color.Secondary, "btn-secondary")]
    [InlineData(Color.Success, "btn-success")]
    [InlineData(Color.Danger, "btn-danger")]
    [InlineData(Color.Warning, "btn-warning")]
    [InlineData(Color.PrimaryOutline, "btn-outline-primary")]
    [InlineData(Color.SecondaryOutline, "btn-outline-secondary")]
    [InlineData(Color.SuccessOutline, "btn-outline-success")]
    [InlineData(Color.DangerOutline, "btn-outline-danger")]
    [InlineData(Color.WarningOutline, "btn-outline-warning")]
    public void BitButton_Should_Render_Button_With_Correct_Color_Class(Color color, string colorCssClass)
    {
        var component = Render(@<BitButton Text="Test"
                                           Color="color"/>);

        component.MarkupMatches(
            @<button type="button" class="btn @colorCssClass">
                Test
            </button>);
    }
    #endregion

    #region Button type tests
    [Fact]
    public void BitButton_Should_Render_Button_Type_By_Default()
    {
        var component = Render(@<BitButton Text="Test" Color="Color.Primary" />);

        component.MarkupMatches(
            @<button type="button" class="btn btn-primary">Test</button>);
    }

    [Theory]
    [InlineData(ButtonType.Button, "button")]
    [InlineData(ButtonType.Submit, "submit")]
    [InlineData(ButtonType.Reset, "reset")]
    public void BitButton_Should_Render_Button_Type_Correctly(ButtonType buttonType, string buttonTypeString)
    {
        var component = Render(@<BitButton Text="Test" Color="Color.Primary" Type="buttonType" />);

        component.MarkupMatches(
            @<button type="@buttonTypeString" class="btn btn-primary">Test</button>);
    }
    #endregion

    #region Size tests
    [Theory]
    [InlineData(Size.Large, "btn-lg")]
    [InlineData(Size.Small, "btn-sm")]
    [InlineData(Size.Mini, "btn-xs")]
    public void BitButton_Should_Render_Button_Size_Correctly(Size size, string sizeCssClass)
    {
        var component = Render(@<BitButton Text="Test" Color="Color.Primary" Size="size" />);

        component.MarkupMatches(
            @<button type="button" class="btn btn-primary @sizeCssClass">Test</button>);
    }
    #endregion

    #region CssClass tests
    [Fact]
    public void BitButton_Should_Render_Custom_Css_Classes_If_Specified()
    {
        var component = Render(@<BitButton Text="Test" Color="Color.Primary" CssClass="my-class another-class" />);

        component.MarkupMatches(
            @<button type="button" class="btn btn-primary my-class another-class">Test</button>);
    }
    #endregion

    #region Disabled tests
    [Fact]
    public void BitButton_Should_Render_Disabled_Class_If_Disabled_Parameter_Is_True()
    {
        var component = Render(@<BitButton Text="test" Color="Color.Primary" Disabled="true" />);

        component.MarkupMatches(
            @<button type="button" class="btn btn-primary disabled">test</button>);
    }
    #endregion
}
